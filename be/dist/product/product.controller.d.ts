import { BillService } from '../bill/bill.service';
import { CategoryService } from '../category/category.service';
import { NotFoundException } from '../core/error.response';
import { SuccessResponse } from '../core/success.response';
import { EvaluationService } from '../evaluation/evaluation.service';
import { NotificationService } from '../notification/notification.service';
import { StoreService } from '../store/store.service';
import { UserService } from '../user/user.service';
import { CreateProductDto } from './dto/create-product.dto';
import { ExcludeIds, FilterDate, FilterProduct } from './dto/product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { ProductService } from './product.service';
export declare class ProductController {
    private readonly productService;
    private readonly storeService;
    private readonly evaluationService;
    private readonly userService;
    private readonly notificationService;
    private readonly billService;
    private readonly categoryService;
    constructor(productService: ProductService, storeService: StoreService, evaluationService: EvaluationService, userService: UserService, notificationService: NotificationService, billService: BillService, categoryService: CategoryService);
    create(product: CreateProductDto, userId: string): Promise<SuccessResponse | NotFoundException>;
    sellerCreateMultiple(products: CreateProductDto[], userId: string): Promise<void | NotFoundException>;
    getAllBySearch(page: number, limit: number, search: string, sortType: string, sortValue: string, userId: string): Promise<SuccessResponse | NotFoundException>;
    getAllBySearchPublic(page: number, limit: number, search: string): Promise<SuccessResponse>;
    getAllOtherProductByStoreId(storeId: string, productId: string): Promise<SuccessResponse>;
    update(id: string, product: UpdateProductDto): Promise<SuccessResponse | NotFoundException>;
    getlistProductLasted(limit: number): Promise<SuccessResponse>;
    mostProductsInStore(limit: number): Promise<SuccessResponse>;
    getRandom(excludeIds: ExcludeIds, limit: number, cursor?: FilterDate): Promise<SuccessResponse | NotFoundException>;
    getAllBySearchAndFilterPublic(page: number, limit: number, search: string, filter?: FilterProduct): Promise<SuccessResponse>;
    getById(id: string): Promise<SuccessResponse | NotFoundException>;
    deleteProduct(id: string): Promise<SuccessResponse | NotFoundException>;
    deleteCategory(categoryId: string): Promise<SuccessResponse | NotFoundException>;
}
